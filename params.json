{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"Get the [Nuget package](http://nuget.org/packages/FAKE), install with:\r\n\r\n\tPM> install-package FAKE\r\n\r\n## Introduction\r\n\r\nModern build automation systems are not limited to simply recompile programs if source code has changed. \r\nThey are supposed to get the latest sources from a source code management system, build test databases, \r\nrun automatic tests, check guidelines, create documentation files, install setup projects and much more. \r\nSome companies are even deploying virtual machines, which are created during a nightly build process. \r\nIn order to simplify the writing of such build scripts and to provide reusability of common tasks \r\nmost build automation systems are using a domain-specific language (DSL). \r\nThese tools can be divided into tools using external DSLs with a custom syntax like **make**, \r\ntools using external DSLs with an XML based syntax like **MSBuild** or **Apache Ant** and \r\ntools using internal DSLs which are integrated in a host language like **Rake**, which uses Ruby.\r\n\r\n## FAKE - An integrated DSL\r\n\r\n\"FAKE - F# Make\" is a build automation system, which is intended to combine the advantages \r\nof the above mentioned tools but to provide a better tooling support. \r\nDue to its integration in F#, all benefits of the .NET Framework and functional programming can be used, \r\nincluding the extensive class library, powerful debuggers and integrated development environments \r\nlike Visual Studio 2008 or SharpDevelop, which provide syntax highlighting and code completion. \r\n\r\nThe new language was designed to be succinct, typed, declarative, extensible and easy to use. \r\nFor instance custom build tasks can be added simply by referencing .NET assemblies and using the corresponding classes.\r\n\r\n## Lastest builds and changelog\r\n\r\nYou can download the latest builds from http://teamcity.codebetter.com. You don't need to register, a guest login is ok.\r\n\r\n* [Latest stable build](http://teamcity.codebetter.com/viewLog.html?buildId=lastSuccessful&buildTypeId=bt335&tab=artifacts&guest=1)\r\n* [Latest development build](http://teamcity.codebetter.com/viewLog.html?buildId=lastSuccessful&buildTypeId=bt166&tab=artifacts&guest=1)\r\n* [Changelog](http://github.com/forki/FAKE/blob/develop/changelog.markdown)\r\n\r\n## How to contribute code\r\n\r\n* Login in github (you need an account)\r\n* Fork the main repository from [Github](https://github.com/forki/FAKE)\r\n* Push your changes to your fork\r\n* Send me a pull request\r\n\r\n## Mailing list\r\n\r\nThe \"FAKE - F# Make\" mailing list can be found at [http://groups.google.com/group/fsharpMake](http://groups.google.com/group/fsharpMake).\r\n\r\n## Articles\r\n\r\n* [Getting started with \"FAKE - F# Make\"](http://www.navision-blog.de/2009/04/01/getting-started-with-fake-a-f-sharp-make-tool): This tutorial shows you how to build the CalculatorSample project.\r\n* [Adding FxCop to a \"FAKE\" build script](http://www.navision-blog.de/2009/04/02/adding-fxcop-to-a-fake-build-script)\r\n* [Debugging \"FAKE - F# Make\" build scripts](http://www.navision-blog.de/2009/04/05/debugging-fake-f-make-build-scripts)\r\n* [Modifying AssemblyInfo and Version via \"FAKE - F# Make\"](http://www.navision-blog.de/2009/04/04/modifying-assemblyinfo-and-version-via-fake-f-make)\r\n* [Writing custom tasks for \"FAKE - F# Make\"](http://www.navision-blog.de/2009/04/14/writing-custom-tasks-for-fake-f-make)\r\n* [Integrating a \"FAKE - F# Make\" build script into TeamCity](http://www.navision-blog.de/2009/04/15/integrate-a-fake-f-make-build-script-into-teamcity)\r\n* [Integrating a \"FAKE - F# Make\" build script into CruiseControl.NET](http://www.navision-blog.de/2009/10/14/integrating-a-fake-f-make-build-script-into-cruisecontrol-net)\r\n* [Building FAKE scripts with Jenkins](http://www.navision-blog.de/2012/01/16/building-fake-scripts-with-jenkins/)\r\n* [Running specific targets in \"FAKE â€“ F# Make\"](http://www.navision-blog.de/2010/11/03/running-specific-targets-in-fake-f-make/)\r\n\r\n## Main Features\r\n\r\n* Simple build infrastructure\r\n* Easy systax\r\n* Full power of .NET Framework\r\n* Simple [TeamCity](http://www.jetbrains.com/teamcity) integration (see [Integrating a \"FAKE - F# Make\" build script into TeamCity](http://www.navision-blog.de/2009/04/15/integrate-a-fake-f-make-build-script-into-teamcity))\r\n* Simple CruiseControl.NET integration (see [Integrating a \"FAKE - F# Make\" build script into CruiseControl.NET](http://www.navision-blog.de/2009/10/14/integrating-a-fake-f-make-build-script-into-cruisecontrol-net))\r\n* FinalTarget feature (to release resources even if build fails)\r\n* Extensible platform - [Write your own tasks](http://www.navision-blog.de/2009/04/14/writing-custom-tasks-for-fake-f-make)\r\n* Easy debugging\r\n* Intellisense support (when using Visual Studio)\r\n\r\n## Predefined tasks\r\n\r\n* Clean task\r\n* [NUnit](http://www.nunit.org) support\r\n* [xUnit.net](http://www.codeplex.com/xunit) support\r\n* [MSpec](https://github.com/machine/machine.specifications) support\r\n* NCover support\r\n* FxCop support\r\n* ExecProcess task (To run tools via the command line)\r\n* MSBuild task (to compile *.csproj and *.fsproj projects or run MSBuild scripts)\r\n* XMLRead task\r\n* VSS task (Get sources from Visual Source Safe)\r\n* XCopy task\r\n* Zip task\r\n* [git](http://git-scm.com/) tasks\r\n* AssemblyInfo task\r\n* MSI task (to run msi-setups with msiexec)\r\n* RegAsm task (to create TLBs from a .dll)\r\n* ...\r\n\r\n# Using FAKE\r\n\r\n## Targets\r\n\r\nTargets are the main unit of work in a \"FAKE - F# Make\" script. \r\nTargets have a name and an action (given as a code block).\r\n\r\n\t// The clean target cleans the build and deploy folders\r\n\tTarget \"Clean\" (fun _ -> \r\n\t\tCleanDirs [\"./build/\"; \"./deploy/\"]\r\n\t)\r\n\r\n### Build target order\r\n\r\nYou can specify the build order using the ==> operator:\r\n\t\r\n\t// \"FAKE - F# Make\" will run these targets in the order Clean, BuildApp, Default\r\n\t\"Clean\" \r\n\t  ==> \"BuildApp\" \r\n\t  ==> \"Default\"\r\n\r\nIf one target should only be run on a specific condition you can use the =?> operator:\r\n\t\r\n\t\"Clean\" \r\n\t  ==> \"BuildApp\"\r\n\t  =?> (\"Test\",hasBuildParam \"test\")  // runs the Test target only if FAKE was called with parameter test\r\n\t  ==> \"Default\"\r\n\r\nIt's also possible to specify the dependencies for targets:\r\n\r\n    // Target Default is dependent from target Clean and BuildApp\r\n    // \"FAKE - F# Make\" will ensure to run these targets before Default\r\n    \"Default\"  <== [\"Clean\"; \"BuildApp\"]\r\n\r\n### Running targets\r\n\r\nYou can execute targets with the \"run\"-command:\r\n\r\n\t// Executes Default target\r\n\tRun \"Default\"\r\n\r\n### Final targets\r\n\r\nFinal target can be used for TearDown functionality. \r\nThese targets will be executed even if the build fails but have to be activated via ActivateFinalTarget().\r\n\r\n\t// FinalTarget will be excuted even if build fails\r\n\tFinalTarget \"CloseSomePrograms\" (fun _ ->\r\n\t\t// close stuff and release resources\r\n\t)\r\n\r\n\t// Activate FinalTarget somewhere during build\r\n\tActivateFinalTarget \"CloseSomePrograms\"\r\n\r\n## FileSets\r\n\r\n\"FAKE - F# Make\" uses similar include and exclude patterns as NAnt and MSBuild. \r\n\r\n### File includes\r\n\r\n\t// Includes all *.csproj files under /src/app by using the !+ operator\r\n\t!+ \"src/app/**/*.csproj\"\r\n\r\n\t// Includes all *.csproj files under /src/app and /test with the ++ operator\r\n\t!+ \"src/app/**/*.csproj\"\r\n\t  ++ \"test/**/*.csproj\"\r\n\r\n### File excludes\r\n\r\n\t// Includes all files under /src/app but excludes *.zip files\r\n\t!+ \"src/app/**/*.*\"\r\n\t  -- \"*.zip\"\r\n\r\n### Scan vs. ScanImmediately\r\n\r\n\"FAKE - F# Make\" provides two scan methods: Scan() and ScanImmediately().\r\n\r\nScan is a lazy method and evaluates the FileSet as late as possible (\"on-demand\").\r\nIf the FileSet is used twice, it will be reevaluated.\r\n\r\nThe following code defines a lazy FileSet:\r\n\r\n\t// Includes all *.csproj files under /src/app and scans them lazy\r\n\tlet apps = \r\n\t  !+ \"src/app/**/*.csproj\"\r\n\t\t|> Scan\r\n\r\nThe same FileSet by using the !! operator:\r\n\r\n    // Includes all *.csproj files under /src/app and scans them lazy\r\n    let apps = !! \"src/app/**/*.csproj\"\r\n\r\nScanImmediately() scans the FileSet immediatly at time of its definition\r\nand memoizes it. \r\n\r\n\t// Includes all files under /src/app but excludes *.zip files\r\n\t//\t  eager scan ==> All files memoized at the time of this definition\r\n\tlet files = \r\n\t  !+ \"src/app/**/*.csproj\"\r\n\t\t-- \"*.zip\"\r\n\t\t|> ScanImmediately\r\n\r\n## UnitTests\r\n\r\n### NUnit\r\n\r\n\t// define test dlls\r\n\tlet testDlls = !! (testDir + @\"/Test.*.dll\")\r\n\t \r\n\tTarget \"NUnitTest\" (fun _ ->\r\n\t\ttestDlls\r\n\t\t\t|> NUnit (fun p -> \r\n\t\t\t\t{p with \r\n\t\t\t\t\tToolPath = nunitPath; \r\n\t\t\t\t\tDisableShadowCopy = true; \r\n\t\t\t\t\tOutputFile = testDir + \"TestResults.xml\"})\r\n    )\r\n\t\t\t\t\t\t\t \r\n### MSpec\r\n\t// define test dlls\r\n\tlet testDlls = !! (testDir + @\"/Test.*.dll\")\r\n\t \r\n\tTarget \"MSpecTest\" (fun _ ->\r\n\t\ttestDlls\r\n\t\t\t|> MSpec (fun p -> \r\n\t\t\t\t{p with \r\n\t\t\t\t\tExcludeTags = [\"LongRunning\"]\r\n\t\t\t\t\tHtmlOutputDir = testOutputDir\t\t\t\t\t\t  \r\n\t\t\t\t\tToolPath = \".\\toools\\MSpec\\mspec.exe\"})\r\n    )\r\n\r\n### xUnit.net\r\n\r\n\t// define test dlls\r\n\tlet testDlls = !! (testDir + @\"/Test.*.dll\")\r\n\r\n\tTarget \"xUnitTest\" (fun _ ->\r\n        testDlls\r\n            |> xUnit (fun p -> \r\n                {p with \r\n                    ShadowCopy = false;\r\n                    HtmlOutput = true;\r\n                    XmlOutput = true;\r\n                    OutputDir = testDir })\r\n    )\r\n\r\n## Sample script\r\n\r\nThis sample script\r\n  \r\n* Assumes \"FAKE - F# Make\" is located at ./tools/FAKE\r\n* Assumes NUnit is located at ./tools/NUnit  \r\n* Cleans the build and deploy paths\r\n* Builds all C# projects below src/app/ and puts the output to .\\build\r\n* Builds all NUnit test projects below src/test/ and puts the output to .\\build\r\n* Uses NUnit to test the generated Test.*.dll's\r\n* Zips all generated files to deploy\\MyProject-0.1.zip\r\n  \r\nYou can read [Getting started with FAKE](http://www.navision-blog.de/2009/04/01/getting-started-with-fake-a-f-sharp-make-tool) to build such a script.\r\n\r\n    // include Fake libs\r\n    #I \"tools\\FAKE\"\r\n    #r \"FakeLib.dll\"\r\n    \r\n    open Fake\r\n    \r\n    // Directories\r\n    let buildDir  = @\".\\build\\\"\r\n    let testDir   = @\".\\test\\\"\r\n    let deployDir = @\".\\deploy\\\"\r\n    \r\n    // tools\r\n    let nunitPath = @\".\\Tools\\NUnit\"\r\n    let fxCopRoot = @\".\\Tools\\FxCop\\FxCopCmd.exe\"\r\n    \r\n    // Filesets\r\n    let appReferences  = \r\n        !+ @\"src\\app\\**\\*.csproj\" \r\n          ++ @\"src\\app\\**\\*.fsproj\" \r\n            |> Scan\r\n    \r\n    let testReferences = !! @\"src\\test\\**\\*.csproj\"\r\n        \r\n    // version info\r\n    let version = \"0.2\"  // or retrieve from CI server\r\n    \r\n    // Targets\r\n    Target \"Clean\" (fun _ -> \r\n        CleanDirs [buildDir; testDir; deployDir]\r\n    )\r\n    \r\n    Target \"BuildApp\" (fun _ ->\r\n        AssemblyInfo \r\n            (fun p -> \r\n            {p with\r\n                CodeLanguage = CSharp;\r\n                AssemblyVersion = version;\r\n                AssemblyTitle = \"Calculator Command line tool\";\r\n                AssemblyDescription = \"Sample project for FAKE - F# MAKE\";\r\n                Guid = \"A539B42C-CB9F-4a23-8E57-AF4E7CEE5BAA\";\r\n                OutputFileName = @\".\\src\\app\\Calculator\\Properties\\AssemblyInfo.cs\"})\r\n                  \r\n        AssemblyInfo \r\n            (fun p -> \r\n            {p with\r\n                CodeLanguage = CSharp;\r\n                AssemblyVersion = version;\r\n                AssemblyTitle = \"Calculator library\";\r\n                AssemblyDescription = \"Sample project for FAKE - F# MAKE\";\r\n                Guid = \"EE5621DB-B86B-44eb-987F-9C94BCC98441\";\r\n                OutputFileName = @\".\\src\\app\\CalculatorLib\\Properties\\AssemblyInfo.cs\"})          \r\n          \r\n        // compile all projects below src\\app\\\r\n        MSBuildRelease buildDir \"Build\" appReferences\r\n            |> Log \"AppBuild-Output: \"\r\n    )\r\n    \r\n    Target \"BuildTest\" (fun _ ->\r\n        MSBuildDebug testDir \"Build\" testReferences\r\n            |> Log \"TestBuild-Output: \"\r\n    )\r\n    \r\n    Target \"NUnitTest\" (fun _ ->  \r\n        !! (testDir + @\"\\NUnit.Test.*.dll\")\r\n            |> NUnit (fun p -> \r\n                {p with \r\n                    ToolPath = nunitPath; \r\n                    DisableShadowCopy = true; \r\n                    OutputFile = testDir + @\"TestResults.xml\"})\r\n    )\r\n    \r\n    Target \"xUnitTest\" (fun _ ->  \r\n        !! (testDir + @\"\\xUnit.Test.*.dll\")\r\n            |> xUnit (fun p -> \r\n                {p with \r\n                    ShadowCopy = false;\r\n                    HtmlOutput = true;\r\n                    XmlOutput = true;\r\n                    OutputDir = testDir })\r\n    )\r\n    \r\n    Target \"FxCop\" (fun _ ->\r\n        !+ (buildDir + @\"\\**\\*.dll\") \r\n            ++ (buildDir + @\"\\**\\*.exe\") \r\n            |> Scan  \r\n            |> FxCop (fun p -> \r\n                {p with                     \r\n                    ReportFileName = testDir + \"FXCopResults.xml\";\r\n                    ToolPath = fxCopRoot})\r\n    )\r\n    \r\n    Target \"Deploy\" (fun _ ->\r\n        !+ (buildDir + \"\\**\\*.*\") \r\n            -- \"*.zip\" \r\n            |> Scan\r\n            |> Zip buildDir (deployDir + \"Calculator.\" + version + \".zip\")\r\n    )\r\n    \r\n    // Build order\r\n\t\"Clean\"\r\n      ==> \"BuildApp\" <=> \"BuildTest\"\r\n      ==> \"FxCop\"\r\n      ==> \"NUnitTest\"\r\n      =?> (\"xUnitTest\",hasBuildParam \"xUnitTest\")  // runs the target only if FAKE was called with parameter xUnitTest\r\n      ==> \"Deploy\"\r\n     \r\n    // start build\r\n    Run \"Deploy\"\r\n\r\n## Deployment using FAKE\r\n\r\n    * Assumes Fake.Deploy.exe is available in the current directory or path.\r\n\r\n### Introduction\r\n\r\nThe FAKE deployment tool allows users to deploy applications to remote computers and to run scripts on these remote agents. A typical scenario maybe as follows: \r\n\r\n\r\n* Build an application -> run tests -> create artifacts and save on build server (Classical FAKE build workflow)\r\n* Extract artifacts from build server and create a NuGet deployment package\r\n* Push the NuGet package to the desired computer this will run the package's FAKE script on the remote machine\r\n\r\n### Installing Fake deployment services\r\n\r\nIn order to deploy application to a remote computer a deployment agent needs to be running on that server.\r\n\r\nTo run an agent in a console, simply run:\r\n    \r\n    Fake.Deploy\r\n\r\nTo install a windows service on that agent:\r\n \r\n   * Open a command prompt with Administrator Priviledges\r\n   * Run Fake.Deploy /install\r\n\r\nBy default the service starts a listener on port 8080. This can however be configured by editing the Fake.Deploy.exe.config file\r\nand changing\r\n    \r\n    <add key=\"ServerName\" value=\"localhost\" />\r\n    <add key=\"Port\" value=\"8080\" />\r\n\r\nto the desired value. If you use the asterisk as port no. then Fake.Deploy will assign the first open port behind of 8080.\r\n\r\nTo ensure the service is running you can navigate to http://{computer}:{port}/fake/ and you should be presented with a page giving the \r\nstatus if the service\r\n\r\n### Uninstalling Fake deployment services\r\n\r\nTo uninstall an agent\r\n\r\n   * Open a command prompt with Administrator Priviledges\r\n   * Run Fake.Deploy /uninstall     \r\n\r\n### Running a FAKE Deployment Package\r\n\r\n### Getting help\r\n\r\nIf you want to learn about Fake.Deploy's command line switches then run:\r\n\r\n    Fake.Deploy /help\r\n\r\n### Creating a Deployment package\r\n\r\nSince Fake.Deploy uses Nuget packages for deployment you only need to create one of those and include a .fsx file in the root folder of the package.\r\n\r\nInstructions for creating nuget packages can be found [at the NuGet document page](http://docs.nuget.org/docs/creating-packages/creating-and-publishing-a-package)  \r\n\r\n### Running deployment\r\n\r\nFake deployment packages can be run manually on the current machine or they can be pushed to an agent on a remote machine.\r\n\r\nTo run a package on the local machine located at C:\\Appdev\\MyDeployment.nupkg you would run the following command:\r\n\r\n    Fake.Deploy /deploy C:\\Appdev\\MyDeployment.nupkg\r\n    \r\nTo run the same package on a remote computer (e.g. integration-1) you can run:\r\n\r\n    Fake.Deploy /deployRemote http://integration-1:8080 C:\\Appdev\\MyDeployment.nupkg \r\n\r\nIt's also possible to just make a HTTP-POST with the package to http://integration-1:8080/fake\r\n\r\nThis will push the directory to the given url. It is worth noting that the port may well be different, as this depends on the configuration of the \r\nlistening agent (see. Installing Fake deployment service)\r\n\r\n### Getting information about the deployments\r\n\r\n    The following assumes you have Fake.Deploy running.\r\n\r\nIt's easy to get information about the deployments. Just make a HTTP request to server with:\r\n    \r\n    fake/deployments/                     -> gives all releases\r\n    fake/deployments?status=active        -> gives all active releases\r\n    fake/deployments/{app}                -> gives all releases of app\r\n    fake/deployments/{app}?status=active  -> gives the active release of the app\r\n\r\n### Rollback of releases\r\n\r\nIf you want to perform a rollback of a release so do a HTTP-PUT to:\r\n\r\n    fake/deployments/{app}?version={version} -> rolls the app back to the given version\r\n    fake/deployments/{app}?version=HEAD~2    -> relative rollback of the app (two versions earlier)","name":"FAKE","tagline":"F# Make"}